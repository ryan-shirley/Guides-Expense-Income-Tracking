trigger: none
pr: none

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Terraform
    displayName: 'Create infrastructure'

    jobs:
      - job: Job
        steps:
          - task: Bash@3
            displayName: 'Terraform : tfvars generate'
            inputs:
              targetType: filePath
              filePath: '$(System.DefaultWorkingDirectory)/azure/terraform/tfvars-generate.sh'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure/terraform'
              noProfile: false
            env:
              # ARM_ACCESS_KEY: $(TF_ARM_ACCESS_KEY)
              # ARM_CLIENT_ID: $(TF_ARM_CLIENT_ID)
              # ARM_CLIENT_SECRET: $(TF_ARM_CLIENT_SECRET)
              # ARM_SUBSCRIPTION_ID: $(TF_ARM_SUBSCRIPTION_ID)
              # ARM_TENANT_ID: $(TF_ARM_TENANT_ID)
              rg_location: $(TF_rg_location)

          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            displayName: 'Terraform : install'
            inputs:
              terraformVersion: 1.0.0

          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: 'Terraform : init'
            inputs:
              command: init
              workingDirectory: '$(System.DefaultWorkingDirectory)/dazure/terraform'
              secureVarsFile: 'terraform.env'
              backendType: selfConfigured
              allowTelemetryCollection: false

          - bash: |
              local_rg_name=`echo "az-${var.environment.location_prefix}-guides-rg-01" | sed 's/ //g'`
              currentWorkspace=$(terraform workspace list -no-color | grep -c -P $local_rg_name)
              if [ $currentWorkspace == "0" ]; then
                  terraform workspace new $local_rg_name -no-color || exit -1
              fi
              terraform workspace select $local_rg_name -no-color || exit -1
            workingDirectory: '$(System.DefaultWorkingDirectory)/azure/terraform'
            displayName: 'Terraform: workspace select'
            env:
              ARM_ACCESS_KEY: $(TF_ARM_ACCESS_KEY)

          - bash: |
              cat terraform.tfvars
            workingDirectory: '$(System.DefaultWorkingDirectory)/azure/terraform'
            displayName: 'Terraform: variables read'

          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: 'Terraform : validate'
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure/terraform'
              allowTelemetryCollection: false

          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: 'Terraform : apply'
            inputs:
              command: apply
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure/terraform'
              secureVarsFile: 'terraform.env'
              commandOptions: '-refresh=true -auto-approve'
              allowTelemetryCollection: false